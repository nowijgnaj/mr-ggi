need(input$box8.1, 'Please select isolate below'),
need(input$box8.2, 'Please select isolate below')
)
isolate_table()
}, server = FALSE)
# BOX OUTCOME - 1 -------------------------------------------------------------
plot_los <- reactive({
p <- set_reac_1() %>%
mutate(year = as.character(year)) # needed for proper visualization
p <-
ggplot(p) +
coord_cartesian(xlim = input$zoom) +
ggtitle("Length of stay - distribution") +
labs(x = "Days") +
theme_minimal() +
theme(
legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_blank(),
plot.title = element_text(face = "bold", size = 12),
axis.title.y = if (input$box_los1.3 == TRUE) {
element_blank()
} else {
element_text(angle = 90)
}
)
if (input$box_los1.3 == TRUE) {
p <- p + geom_density_ridges(
aes_string(
x = "LOS",
y = input$box_los1.0,
fill = input$box_los1.0,
height = "..density.."
),
alpha = 0.6
)
} else {
if (input$box_los1.2) {
p <- p + geom_histogram(
aes_string(
x = "LOS",
fill = input$box_los1.0
),
alpha = 0.6,
binwidth = 1,
position = "dodge",
color = "black"
) +
labs(y = "Count")
} else {
p <- p + geom_density(
aes_string(
x = "LOS",
fill = input$box_los1.0
),
position = "identity",
alpha = 0.3,
bw = 1
) + labs(y = "Density")
}
}
if(input$box_los1.0 == "check"){
p <-
p + if (input$diagnosticsInput == "bc_timing") {
scale_fill_manual(
values = c("#a6a6a6", "#d1351b"),
name = "Blood cultures"
)
}
else {
scale_fill_manual(
values = c("#a6a6a6", "#f39c12"),
name = "Urine cultures"
)
}
} else {
if (input$box_los1.0 == "1") {
p <- p + scale_fill_continuous(low = "darkblue", high = "darkblue")
} else {
p <- p + scale_fill_viridis_d()
}
}
if (input$box_los1.1 == FALSE) {
p <- p + guides(fill = FALSE)
}
p
})
output$plot_los <- renderPlot({
plot_los()
})
# BOX OUTCOME - 2 -------------------------------------------------------------
kaplan_los <- reactive({
kaplan_set <- set_reac_1() %>%
mutate(status = if_else(death_during_adm == FALSE, 1, 0))
if (input$box_los1.0 != 1) {
ggsurvplot(
surv_fit(as.formula(
paste0("Surv(LOS, event = status)", "~", input$box_los1.0)),
data = kaplan_set),
data = kaplan_set,
color = "strata",
pval = TRUE,
conf.int = FALSE,
pval.method = TRUE,
break.time.by = 5,
palette = {
if (input$box_los1.0 == "1") {
c("lightgrey")
}
if (input$box_los1.0 == "check") {
if (input$diagnosticsInput == "bc_timing") {
c("#a6a6a6", "#d1351b")
}
else {
c("#a6a6a6", "#f39c12")
}
}
else {
viridis(n_distinct(set_reac_1() %>% select(input$box_los1.0)))
}
},
ylab = "Probablility to stay in hospital",
xlab = "Length of stay (days)",
ggtheme = theme_minimal(),
legend = "none",
pval.coord = c(1, 0.15),
pval.method.coord = c(1, 0.25),
xlim = input$zoom, # 20 for show purposes
break.x.by = 5
)
} else {
NULL
}
})
output$kaplan_los <- renderPlot({
validate(
need(!is.null(kaplan_los()), 'Please select at least two groups in box (left)'),
need(length(unique(kaplan_los()$plot$data$strata)) <= 5, 'Max. number of groups = 5; please adjust selection')
)
kaplan_los()
})
# BOX OUTCOME - 3 -------------------------------------------------------------
table_los <- reactive({
set_table <- set_reac_1() %>%
group_by_(input$box_los3) %>%
summarise(
"Mean LOS" = round(mean(LOS), 1),
"Median LOS" = round(median(LOS), 1),
Q1 = round(quantile(LOS, 0.25), 1),
Q3 = round(quantile(LOS, 0.75), 1),
n = n()
) %>%
mutate(Proportion = paste((round(
n / sum(n) * 100, 1
)), "%"))
if (input$diagnosticsInput == "bc_timing" & input$box_los3 == "check") {
set_table <- set_table %>% rename("Blood cultures" = check)
}
if (input$diagnosticsInput == "uc_timing" & input$box_los3 == "check") {
set_table <- set_table %>% rename("Urine cultures" = check)
}
if (input$box_los3 == "gender") {
set_table <- set_table %>% rename("Gender" = gender)
}
if (input$box_los3 == "year") {
set_table <- set_table %>% rename("Year" = year)
}
if (input$box_los3 == "ab_group") {
set_table <- set_table %>% rename("Antimicrobial - Groups" = ab_group)
}
if (input$box_los3 == "ab_type") {
set_table <- set_table %>% rename("Antimicrobials" = ab_type)
}
if (input$box_los3 == "specialty") {
set_table <- set_table %>% rename("Specialty" = specialty)
}
if (input$box_los3 == "sub_specialty") {
set_table <- set_table %>% rename("Subspecialty" = sub_specialty)
}
if (input$box_los3 == "adm_route") {
set_table <- set_table %>% rename("Origin" = adm_route)
}
datatable(
set_table,
rownames = FALSE,
extensions = "Buttons",
options = list(
dom = 'Bfrtp',
buttons = c('csv', 'excel', 'pdf'),
style = "bootstrap",
lengthMenu = c(seq(5, 150, 5))
)
)
})
output$table_los <- DT::renderDataTable({
table_los()
}, server = FALSE)
# DOWNLOAD ----------------------------------------------------------------
output$downloadData <- downloadHandler(
filename = function() {
paste(input$filename, "_anti_add_", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write_csv(set_base(), file)
}
)
output$downloadMicroData <- downloadHandler(
filename = function() {
paste(input$filename, "_microbiology_", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write_csv(test_results(), file)
}
)
download_box <- function(exportname, plot) {
downloadHandler(
filename = function() {
paste(exportname, Sys.Date(), ".png", sep = "")
},
content = function(file) {
ggsave(file, plot = plot, device = "png", width = 8)
}
)
}
output$down_age_select <- download_box("pat_age", plot_age_select())
output$down_year_select <- download_box("pat_year", plot_year_select())
output$down_box_1 <- download_box("antimicrobial_use", plot_ab())
output$down_box_2 <- download_box("DDD_groups", plot_DDD_all())
output$down_box_3 <- download_box("DOT_groups", plot_DOT_all())
output$down_box_5 <- download_box("diagnostics_year", dia_adm())
output$down_box_6 <- download_box("diagnostics_timing", plot_dia_timing())
output$down_box_7 <- download_box("diagnostics_perform", plot_dia_perform())
output$down_box_micro <- download_box("first_isolates", micro_plot())
output$down_box_res <- download_box("resistance", isolate_plot())
output$down_box_res_ts <- download_box("resistance_time", isolate_ts())
output$down_box_ddd_ts <- download_box("ddd time", ddd_ts())
output$down_box_dot_ts <- download_box("dot time", dot_ts())
output$down_box_los1.0 <- download_box("los_groups", plot_los())
output$down_box_los2 <- download_box("km-curve", kaplan_los()$plot)
}
library(MRggi)
output$down_box_5 <- download_box("diagnostics_year", dia_adm())
library(qicharts2)
plot_vit <- ggplot(df_vit) +
geom_col(aes(x = Nutrient, y = pct_dv, fill = pct_dv)) +
geom_hline(yintercept = 100) +
labs(x = "Nutrient", y = "% Daily Value")  +
theme_gray() +
ylim(0, NA) +
scale_fill_gradient(low = "red",
high = "green",
limits = c(0, 100),
na.value = "khaki1") +
theme(legend.position = "none",
panel.background = element_rect(fill = "aliceblue"),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
dashboardHeader(title = "Title"),
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
CHD <- readr::read_csv("C:/Users/kki/Documents/R/www/PRSweb/consent_1_835_chd.csv")
print(CHD)
View(CHD)
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
shiny::runApp('~/R/www/PRSweb')
shiny::runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
shiny::runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
result <- cor_filter(x,y)
source("~/.active-rstudio-document")
result <- cor_filter(x, y)
data_path <- system.file("data", "/data/yeast_SNP.txt", package = "MRggi")
yeast_SNP <- function(){
data_path <- system.file("data", "/data/yeast_SNP.txt", package = "MRggi")
data_load <- as.matrix(data_path)
return(data_load)
}
yeast_SNP <- function(){
data_path <- system.file("data", "/data/yeast_SNP.txt", package = "MRggi")
data_load <- as.matrix(data_path)
return(data_load)
}
yeast_SNP
y = fread("./data/yeast_exp.txt") %>% as.matrix()  # Gene expression
library(dplyr)
library(data.table)
y = fread("./data/yeast_exp.txt") %>% as.matrix()  # Gene expression
x = fread("./data/yeast_SNP.txt") %>% as.matrix()  # SNP genotype
result <- cor_filter(x, y)
result
result <- cor_filter(x, y, cor.thr = 0.8)
head(result)
cis_eff <- cis_eff_filter(x,y, result)
# eMatrix.RData와 gList.RData 파일을 로드
load("eMatrix.RData")
# eMatrix.RData와 gList.RData 파일을 로드
load("./data/eMatrix.RData")
load("./data/gList.RData")
result <- cor_filter(gList, eMatrix, cor.thr = 0.8)
head(result)
cis_eff <- cis_eff_filter(x,y, result)
dim(x)
dim(y)
dim(result)
dim(gList)
gList
length(gList)
dim(eMatrix)
cis_eff <- cis_eff_filter(gList,eMatrix, result)
cis_eff
head(cis_eff)
View(eMatrix)
View(gList)
x
dim(x)
x[1,]
x[,1]
View(eMatrix)
dim(eMatrix)
View(gList)
gList[[1]]
dim(gList[[1]])
dim(gList[[10]])
gList[[10]]
View(eMatrix)
View(gList)
X
x
dim(x)
dim(y)
result <- cor_filter(x, y)
result
dim(x)
dim(y)
y
x
y.pair = FineMapping(x,y)
y.pair = FineMapping(x,y)
library(susieR)
y.pair = FineMapping(x,y)
x
class(x)
x.double <- data.matrix(x)
y.pair = FineMapping(x.double,y)
storage.mode(x)
storage.mode(x.double) <- "double"
y.pair = FineMapping(x.double,y)
View(y.pair)
result <- cor_filter(x, y.pair)
class(x)
storage.mode(x)
result <- cor_filter(x.double, y.pair)
storage.mode(x.double)
class(x.double)
x.double
x
cor_filter <- function(x, y, cor.thr = 0) {
if(is.matrix(x)) {
x.temp <- apply(x, 2, scale)  # lapply 대신 apply 사용
} else {
x.temp <- lapply(x, scale)
}
y.temp <- scale(y)
cor.y <- stats::cor(y.temp)
cor.mat <- matrix(0, nrow(cor.y), ncol(cor.y))
cor.mat[which(abs(cor.y) > cor.thr)] = 1
cor.mat[lower.tri(cor.mat, diag = TRUE)] = 0
calc.idx <- which(cor.mat == 1, arr.ind = TRUE)
message("gene-gene correlation : >", cor.thr)
return(calc.idx)
}
result <- cor_filter(x, y.pair)
x.temp <- lapply(x, scale)
cor_filter <- function(x, y, cor.thr = 0) {
x.temp <- lapply(x, scale)
y.temp <- scale(y)
cor.y <- stats::cor(y.temp)
cor.mat <- matrix(0, nrow(cor.y), ncol(cor.y))
cor.mat[which(abs(cor.y) > cor.thr)] = 1
cor.mat[lower.tri(cor.mat, diag = TRUE)] = 0
calc.idx <- which(cor.mat == 1, arr.ind = TRUE)
message("gene-gene correlation : >", cor.thr)
return(calc.idx)
}
dim (y.pair)
dim(y)
View(gList)
View(eMatrix)
View(x)
View(y.pair)
dim(x)
dim(y)
result
nrow(result)
head(y.pair)
beta_coef <- Multiple_regression(y.pair$S1, y)
result <- cor_filter(y.pair, y)
result
nrow(result)
result2 <- cor_filter(y.pair, y, cor.thr = 0.8)
result2
nrow(result2)
cis_eff <- cis_eff_filter(y.pair,y, result2)
head(cis_eff)
library(dplyr)
set.seed(1000)
head(y.pair)
View(x.double)
View(y)
View(y.pair)
head(y.pair$S1)
tail(y.pair)
#여기는 랜덤 데이터 생성 같으니 넘기자
beta_coef <- Multiple_regression(y.pair$S1, y)
coef<-Quartet_2SLS(x1=y.pair$S1, x2=y.pair$S1, y1=y, y2=y)
nrow(y)
nrow(y.pair$S1)
remotes::install_github("hiows/MRggi")
nrow(y.pair)
View(y.pair)
View(eMatrix)
View(gList)
View(Af)
rm(Af, Af_num, CHD)
table(sapply(y.pair, ncol))
result2
nrow(result2)
result2 <- cor_filter(y.pair, y, cor.thr = 0.8)
#여기는 랜덤 데이터 생성 같으니 넘기자
beta_coef <- Multiple_regression(x=y.pair$S1, y=y)
#여기는 랜덤 데이터 생성 같으니 넘기자
beta_coef <- Multiple_regression(y, y.pair$S1)
str(y.pair$S1)
str(y)
coef<-Quartet_2SLS(y, y, y.pair$S1, y.pair$S1)
print(beta_coef)
head(beta_coef)
print(coef)
View(y.pair)
View(y)
View(x.double)
result <- cor_filter(y.pair, y)
result
result <- cor_filter(y.pair, y)
head(result)
nrow(result)
result2 <- cor_filter(y.pair, y, cor.thr = 0.8)
head(result2)
nrow(result2)
cis_eff <- cis_eff_filter(y.pair,y, result2)
head(cis_eff)
cis_eff2 <- cis_eff_filter(y.pair,y, result2, Bsg.thr = 0.3)
head(cis_eff2)
cis_eff2 <- cis_eff_filter(y.pair,y, result2, Bsg.thr = 0.1)
head(cis_eff2)
#여기는 랜덤 데이터 생성 같으니 넘기자
beta_coef <- Multiple_regression(y, y.pair$S1) #변수 순서가 중요
print(beta_coef)
#여기는 랜덤 데이터 생성 같으니 넘기자
beta_coef <- Multiple_regression(y, y.pair$S1) #변수 순서가 중요
head(beta_coef)
coef<-Quartet_2SLS(y, y, y.pair$S1, y.pair$S1)
print(coef)
