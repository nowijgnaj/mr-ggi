values = c("#21908CFF", "#FDE725FF", "#440154FF"),
na.value = "lightgrey"
) +
ggtitle(
label =
paste(
"Selected isolate: ",
input$box8.1,
if (length(input$box8.2) == 1) {
"\nSelected antimicrobial: "
} else {
"\nCo-resistance to: "
},
paste(ab_name(c(input$box8.2)), collapse = " & ")
)
) +
theme_minimal() +
theme(
legend.title = element_blank(),
legend.text = element_text(margin = margin(l = 5)),
axis.title.y = element_blank(),
plot.title = element_text(face = "bold", size = 12)
) +
if (input$box8.0 == "fullname") {
theme(axis.text.y = element_blank())
}
if (input$box8.0.1 == "Proportion") {
plot +
scale_y_continuous(
breaks = seq(0,1,0.1),
labels = scales::percent(seq(0, 1 ,0.1))
) +
labs(y = "Percentage") +
coord_flip()
} else {
plot +
labs(y = "Count") +
coord_flip()
}
})
output$isolate_plot <- renderPlot({
validate(
need(input$box8.1, 'Please select isolate below'),
need(input$box8.2, 'Please select antimicrobial below')
)
isolate_plot()
})
# over time
isolate_ts <- reactive({
col_select <- paste(c(input$box8.2, input$box8.3), sep = ",")
ts <- isolate_data() %>%
select(col_select) %>%
group_by_(input$box8.3)
if (length(input$box8.2) == 1) {
ts <- ts %>% count_df(combine_SI = FALSE)
} else {
ts <- ts %>%
mutate(value = count_R(.),
interpretation = "R")
}
plot <- qic(
if (input$box8.3 == "year") {
year
} else {
if (input$box8.3 == "yearquarter_test") {
yearquarter_test
} else {
yearmonth_test
}
},
value,
data = ts,
agg.fun = "sum",
decimals = 2,
facets = ~ interpretation,
ncol = 1
) +
labs(caption = "(Line represents median; if red-dotted = signal for non-random variation)") +
theme(strip.text = element_text(face = "bold"),
plot.title = element_text(face = "bold", size = 12),
plot.caption = element_text(size = 10, colour = "darkgrey"))
if (input$box8.3 == "yearmonth_test") {
plot +scale_x_yearmon(n = length(ts$yearmonth_test)/12) +
labs(x = "Months", y = "Count") +
ggtitle(
paste0(input$box8.1, ": ",
if (length(input$box8.2) == 1) {
("Susceptibility to ")
} else {
"Co-resistance to "
},
paste(ab_name(c(input$box8.2)), collapse = " & "), " - Count per month"
))
} else {
if (input$box8.3 == "yearquarter_test") {
plot + scale_x_yearmon(n = length(ts$yearquarter_test)/12) +
labs(x = "Quarter", y = "Count") +
ggtitle(
paste0(input$box8.1, ": ",
if (length(input$box8.2) == 1) {
("Susceptibility to ")
} else {
"Co-resistance to "
},
paste(ab_name(c(input$box8.2)), collapse = " & "), " - Count per quarter"
))
} else {
plot + scale_x_continuous(breaks = c(min(ts$year, na.rm = TRUE):max(ts$year, na.rm = TRUE))) +
labs(x = "Year", y = "Count") +
ggtitle(
paste0(input$box8.1, ": ",
if (length(input$box8.2) == 1) {
("Susceptibility to ")
} else {
"Co-resistance to "
},
paste(ab_name(c(input$box8.2)), collapse = " & "), " - Count per year"
))
}
}
})
output$isolate_ts <- renderPlot({
validate(
need(input$box8.1, 'Please select isolate below'),
need(input$box8.2, 'Please select antimicrobial below')
)
isolate_ts()
})
# isolates table
isolate_table <- reactive({
table <- isolate_data() %>%
dplyr::select(input$box8.2, input$box8.7) %>%
group_by_(input$box8.7) %>%
nest()
if (length(input$box8.2) == 1) {
table <- table %>%
mutate(Value = map(data,
~ if(input$box8.8 == "Count") {
count_df(.)
} else {
portion_df(., as_percent = TRUE)
})) %>%
select(-data) %>%
unnest() %>%
rename(Antimicrobial = Antibiotic)
} else {
table <- table %>%
mutate(Value = map(data,
~ if(input$box8.8 == "Count") {
count_R(.)
} else {
portion_R(., as_percent = TRUE)
}),
Interpretation = "R",
Antimicrobial = paste0(ab_name(c(input$box8.2)), collapse = " & ")) %>%
select(-data) %>%
unnest()
}
table <- table %>%
spread(Interpretation, Value) %>%
mutate(Isolate = input$box8.1) %>%
select(Group = input$box8.7, Isolate, everything())
if (input$box8.7 == "yearmonth_test") {
table <- table %>%
mutate(Group = as.character(as.yearmon(Group)))
}
if (input$box8.7 == "yearquarter_test") {
table <- table %>%
mutate(Group = as.character(as.yearqtr(Group)))
}
if (input$box8.7 == "fullname") {
table <- table %>%
select(-Isolate)
} else {
table
}
datatable(
table,
extensions = 'Buttons',
escape = FALSE,
rownames = FALSE,
caption =
if (length(input$box8.2) != 1) {
"Co-resistance"
} else {
NULL
},
fillContainer = TRUE,
options = list(
dom = 'Bfrtp',
buttons = c('csv', 'excel', 'pdf'))
)
})
output$isolate_table <- DT::renderDataTable({
validate(
need(input$box8.1, 'Please select isolate below'),
need(input$box8.2, 'Please select isolate below')
)
isolate_table()
}, server = FALSE)
# BOX OUTCOME - 1 -------------------------------------------------------------
plot_los <- reactive({
p <- set_reac_1() %>%
mutate(year = as.character(year)) # needed for proper visualization
p <-
ggplot(p) +
coord_cartesian(xlim = input$zoom) +
ggtitle("Length of stay - distribution") +
labs(x = "Days") +
theme_minimal() +
theme(
legend.position = "bottom",
legend.direction = "horizontal",
legend.title = element_blank(),
plot.title = element_text(face = "bold", size = 12),
axis.title.y = if (input$box_los1.3 == TRUE) {
element_blank()
} else {
element_text(angle = 90)
}
)
if (input$box_los1.3 == TRUE) {
p <- p + geom_density_ridges(
aes_string(
x = "LOS",
y = input$box_los1.0,
fill = input$box_los1.0,
height = "..density.."
),
alpha = 0.6
)
} else {
if (input$box_los1.2) {
p <- p + geom_histogram(
aes_string(
x = "LOS",
fill = input$box_los1.0
),
alpha = 0.6,
binwidth = 1,
position = "dodge",
color = "black"
) +
labs(y = "Count")
} else {
p <- p + geom_density(
aes_string(
x = "LOS",
fill = input$box_los1.0
),
position = "identity",
alpha = 0.3,
bw = 1
) + labs(y = "Density")
}
}
if(input$box_los1.0 == "check"){
p <-
p + if (input$diagnosticsInput == "bc_timing") {
scale_fill_manual(
values = c("#a6a6a6", "#d1351b"),
name = "Blood cultures"
)
}
else {
scale_fill_manual(
values = c("#a6a6a6", "#f39c12"),
name = "Urine cultures"
)
}
} else {
if (input$box_los1.0 == "1") {
p <- p + scale_fill_continuous(low = "darkblue", high = "darkblue")
} else {
p <- p + scale_fill_viridis_d()
}
}
if (input$box_los1.1 == FALSE) {
p <- p + guides(fill = FALSE)
}
p
})
output$plot_los <- renderPlot({
plot_los()
})
# BOX OUTCOME - 2 -------------------------------------------------------------
kaplan_los <- reactive({
kaplan_set <- set_reac_1() %>%
mutate(status = if_else(death_during_adm == FALSE, 1, 0))
if (input$box_los1.0 != 1) {
ggsurvplot(
surv_fit(as.formula(
paste0("Surv(LOS, event = status)", "~", input$box_los1.0)),
data = kaplan_set),
data = kaplan_set,
color = "strata",
pval = TRUE,
conf.int = FALSE,
pval.method = TRUE,
break.time.by = 5,
palette = {
if (input$box_los1.0 == "1") {
c("lightgrey")
}
if (input$box_los1.0 == "check") {
if (input$diagnosticsInput == "bc_timing") {
c("#a6a6a6", "#d1351b")
}
else {
c("#a6a6a6", "#f39c12")
}
}
else {
viridis(n_distinct(set_reac_1() %>% select(input$box_los1.0)))
}
},
ylab = "Probablility to stay in hospital",
xlab = "Length of stay (days)",
ggtheme = theme_minimal(),
legend = "none",
pval.coord = c(1, 0.15),
pval.method.coord = c(1, 0.25),
xlim = input$zoom, # 20 for show purposes
break.x.by = 5
)
} else {
NULL
}
})
output$kaplan_los <- renderPlot({
validate(
need(!is.null(kaplan_los()), 'Please select at least two groups in box (left)'),
need(length(unique(kaplan_los()$plot$data$strata)) <= 5, 'Max. number of groups = 5; please adjust selection')
)
kaplan_los()
})
# BOX OUTCOME - 3 -------------------------------------------------------------
table_los <- reactive({
set_table <- set_reac_1() %>%
group_by_(input$box_los3) %>%
summarise(
"Mean LOS" = round(mean(LOS), 1),
"Median LOS" = round(median(LOS), 1),
Q1 = round(quantile(LOS, 0.25), 1),
Q3 = round(quantile(LOS, 0.75), 1),
n = n()
) %>%
mutate(Proportion = paste((round(
n / sum(n) * 100, 1
)), "%"))
if (input$diagnosticsInput == "bc_timing" & input$box_los3 == "check") {
set_table <- set_table %>% rename("Blood cultures" = check)
}
if (input$diagnosticsInput == "uc_timing" & input$box_los3 == "check") {
set_table <- set_table %>% rename("Urine cultures" = check)
}
if (input$box_los3 == "gender") {
set_table <- set_table %>% rename("Gender" = gender)
}
if (input$box_los3 == "year") {
set_table <- set_table %>% rename("Year" = year)
}
if (input$box_los3 == "ab_group") {
set_table <- set_table %>% rename("Antimicrobial - Groups" = ab_group)
}
if (input$box_los3 == "ab_type") {
set_table <- set_table %>% rename("Antimicrobials" = ab_type)
}
if (input$box_los3 == "specialty") {
set_table <- set_table %>% rename("Specialty" = specialty)
}
if (input$box_los3 == "sub_specialty") {
set_table <- set_table %>% rename("Subspecialty" = sub_specialty)
}
if (input$box_los3 == "adm_route") {
set_table <- set_table %>% rename("Origin" = adm_route)
}
datatable(
set_table,
rownames = FALSE,
extensions = "Buttons",
options = list(
dom = 'Bfrtp',
buttons = c('csv', 'excel', 'pdf'),
style = "bootstrap",
lengthMenu = c(seq(5, 150, 5))
)
)
})
output$table_los <- DT::renderDataTable({
table_los()
}, server = FALSE)
# DOWNLOAD ----------------------------------------------------------------
output$downloadData <- downloadHandler(
filename = function() {
paste(input$filename, "_anti_add_", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write_csv(set_base(), file)
}
)
output$downloadMicroData <- downloadHandler(
filename = function() {
paste(input$filename, "_microbiology_", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write_csv(test_results(), file)
}
)
download_box <- function(exportname, plot) {
downloadHandler(
filename = function() {
paste(exportname, Sys.Date(), ".png", sep = "")
},
content = function(file) {
ggsave(file, plot = plot, device = "png", width = 8)
}
)
}
output$down_age_select <- download_box("pat_age", plot_age_select())
output$down_year_select <- download_box("pat_year", plot_year_select())
output$down_box_1 <- download_box("antimicrobial_use", plot_ab())
output$down_box_2 <- download_box("DDD_groups", plot_DDD_all())
output$down_box_3 <- download_box("DOT_groups", plot_DOT_all())
output$down_box_5 <- download_box("diagnostics_year", dia_adm())
output$down_box_6 <- download_box("diagnostics_timing", plot_dia_timing())
output$down_box_7 <- download_box("diagnostics_perform", plot_dia_perform())
output$down_box_micro <- download_box("first_isolates", micro_plot())
output$down_box_res <- download_box("resistance", isolate_plot())
output$down_box_res_ts <- download_box("resistance_time", isolate_ts())
output$down_box_ddd_ts <- download_box("ddd time", ddd_ts())
output$down_box_dot_ts <- download_box("dot time", dot_ts())
output$down_box_los1.0 <- download_box("los_groups", plot_los())
output$down_box_los2 <- download_box("km-curve", kaplan_los()$plot)
}
library(MRggi)
output$down_box_5 <- download_box("diagnostics_year", dia_adm())
library(qicharts2)
plot_vit <- ggplot(df_vit) +
geom_col(aes(x = Nutrient, y = pct_dv, fill = pct_dv)) +
geom_hline(yintercept = 100) +
labs(x = "Nutrient", y = "% Daily Value")  +
theme_gray() +
ylim(0, NA) +
scale_fill_gradient(low = "red",
high = "green",
limits = c(0, 100),
na.value = "khaki1") +
theme(legend.position = "none",
panel.background = element_rect(fill = "aliceblue"),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
dashboardHeader(title = "Title"),
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
CHD <- readr::read_csv("C:/Users/kki/Documents/R/www/PRSweb/consent_1_835_chd.csv")
print(CHD)
View(CHD)
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
shiny::runApp('~/R/www/PRSweb')
shiny::runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
shiny::runApp('~/R/www/PRSweb')
runApp('~/R/www/PRSweb')
